#!env bash

# Generate mod.rs for every project directory.

CURRENT_PATH=$(pwd)
SCRIPT_PATH=$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)
PROJECT_ROOT=$(dirname "$SCRIPT_PATH")
SRC_PATH=$PROJECT_ROOT/src

echo "Current Path: $CURRENT_DIR"
echo "Project Path: $PROJECT_ROOT"

function GenerateModForDir() {
  local parent=$1
  local modFile=$parent/mod.rs
  if [[ "$parent" == "$SRC_PATH" ]]; then
	# No mod.rs in the src directory
	# Rename mod.rs to modules.rs
    modFile=$parent/modules.rs
  fi

  echo "Module:" $modFile

  echo -n "" > $modFile
  echo "// Auto-generated by hack/mod.sh" >> $modFile
  echo "// Don't edit this file manually" >> $modFile
  echo "" >> $modFile

  echo "// Import mod from directories" >> $modFile
  echo "" >> $modFile

  local subdirs=$(cd $parent && ls -d */ 2>/dev/null)
  local dir
  for dir in $subdirs; do
	dir=${dir::-1}
    GenerateModForDir $parent/$dir

	echo '#[path = "'$dir'/mod.rs"]' >> $modFile
	echo "pub mod $dir;" >> $modFile
	# echo "pub use $dir;" >> $modFile
    echo "" >> $modFile
  done

  echo "// Import mod from files" >> $modFile
  echo "" >> $modFile

  local submods=$(cd $parent && ls -p | grep -v / | grep -E '.rs$' | grep -Ev '_test.rs$')
  local mod
  for mod in $submods; do
	if [[ "$mod" == "main.rs" || "$mod" == "lib.rs" || "$mod" == "mod.rs" ]]; then
		continue
	fi
	if [[ "$parent" == $SRC_PATH && "$mod" == "modules.rs" ]]; then
		continue
	fi
	mod=${mod::-3}

	echo "pub mod $mod;" >> $modFile
	echo "pub use $mod::*;" >> $modFile
    echo "" >> $modFile
  done

  echo "// Import tests from files(*_test.rs)" >> $modFile
  echo "" >> $modFile

  local tests=$(cd $parent && ls -p | grep -v / | grep '_test\.rs$')
  local test
  for test in $tests; do
	test=${test::-3}

	echo "#[cfg(test)]" >> $modFile
	echo "mod $test;" >> $modFile
    echo "" >> $modFile
  done

  rustfmt $modFile
}

GenerateModForDir $SRC_PATH

echo ""
echo "Import modules in main.rs(or lib.rs):"
echo ""
echo "mod modules;"
echo "use modules::*;"

